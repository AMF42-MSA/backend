server.servlet.context-path: /lecture

---
server.port: 8081

spring:
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true


  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:29092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        # 강의 분류 내역 비동기 처리
        in-categoryChanged:   #입력(Consumer) 채널 (in-토픽이름)
#        destination: categoryChanged   #토픽이름 (category의 이름으로 일단 진행)
          destination: lecture   #토픽이름

          contentType: application/json    #데이터형식
          group: CGR-lecture-categoryChanged  #consumer 그룹: CGR-MSA이름-토픽이름
        # 강의 변경 내역 공유
        out-lectureChanged:   #출력(Producer) 채널 (consumer-MSA이름-토픽이름)
          destination: lectureChanged   #토픽이름
          contentType: application/json    #데이터형식


logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

spring.datasource:
  url: jdbc:mysql://amf42-mysql.mysql.database.azure.com:3306/lecture?useUnicode=true&serverTimezone=Asia/Seoul
#  url: jdbc:mysql://mysql/member?useUnicode=true&serverTimezone=Asia/Seoul
  username: lecture
  password: lecture

hibernate.dialect: org.hibernate.dialect.MySQLInnoDBDialect


spring.datasource.hikari.initializationFailTimeout: 30000

spring.jpa.generate-ddl: true
spring.jpa.hibernate.ddl-auto: update
spring.jpa.properties:
  hibernate:
    show_sql: true
    format_sql: true


#logging:
#  level:
#    org.hibernate.type: debug
#    org.hibernate.type.descriptor.sql: trace  #파라미터 바인딩 출력
#    org.springframework.cloud: debug
#    everylecture: debug
#  pattern.level: "user:%X{user} %5p"
#  pattern.console: "%clr(%d{MM-dd HH:mm:ss.SSS}){blue}, %-5level, %clr(%-8.15t){cyan}, %clr(%c{5}. %M){blue}%clr(,%-4L){blue} %clr(,){red} %clr(%m){faint}%n"
member:
  ribbon:
    listOfServers: http://member:8080
---
spring.profiles: docker

server.port: 8080

spring:
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka:9092
#          brokers: kafka.confluent:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        # 강의 분류 내역 비동기 처리
        in-categoryChanged:   #입력(Consumer) 채널 (in-토픽이름)
#         destination: categoryChanged   #토픽이름 (category의 이름으로 일단 진행)
          destination: lecture   #토픽이름

          contentType: application/json    #데이터형식
          group: CGR-lecture-categoryChanged  #consumer 그룹: CGR-MSA이름-토픽이름
        # 강의 변경 내역 공유
        out-lectureChanged:   #출력(Producer) 채널 (consumer-MSA이름-토픽이름)
          destination: lectureChanged   #토픽이름
          contentType: application/json    #데이터형식

spring.datasource:
  url: jdbc:mysql://amf42-mysql.mysql.database.azure.com:3306/lecture?useUnicode=true&serverTimezone=Asia/Seoul
#  url: jdbc:mysql://vm-mysql13.mysql.database.azure.com:3306/lecture?useUnicode=true&serverTimezone=Asia/Seoul
#  url: jdbc:mysql://mysql/member?useUnicode=true&serverTimezone=Asia/Seoul
  username: lecture
  password: lecture

hibernate.dialect: org.hibernate.dialect.MySQLInnoDBDialect


spring.datasource.hikari.initializationFailTimeout: 30000

spring.jpa.generate-ddl: true
spring.jpa.hibernate.ddl-auto: update
spring.jpa.properties:
  hibernate:
    show_sql: true
    format_sql: true


#logging:
#  level:
#    org.hibernate.type: debug
#    org.hibernate.type.descriptor.sql: trace  #파라미터 바인딩 출력
#    org.springframework.cloud: debug
#    everylecture: debug
#  pattern.level: "user:%X{user} %5p"
#  pattern.console: "%clr(%d{MM-dd HH:mm:ss.SSS}){blue}, %-5level, %clr(%-8.15t){cyan}, %clr(%c{5}. %M){blue}%clr(,%-4L){blue} %clr(,){red} %clr(%m){faint}%n"
member:
  ribbon:
    listOfServers: http://member:8080

